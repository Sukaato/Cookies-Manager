const _CookiesManager=()=>{const REGEX=new RegExp(/([\w-]+)=([\w- ]+)/),get=async key=>new Promise((resolve,reject)=>{if(!key)return reject({success:!1,message:"[Cookies Manager] : You must define a key to get a cookie."});if(!_exist(key))return reject({success:!1,message:"[Cookies Manager] : The cookie doesn't exist."});const COOKIES=_getDocumentCookies(),Matcher=COOKIES.find(cookie=>{const Matcher=cookie.match(REGEX);return Matcher[1]===key}).match(REGEX);return resolve({key:Matcher[1],value:Matcher[2]})}),set=async cookie=>new Promise((resolve,reject)=>{if(!cookie.key)return reject("[Cookies Manager] : You must define a name for your cookie.");if(!cookie.value)return reject("[Cookies Manager] : You must set a value for your cookie.");if(!REGEX.test(`${cookie.key}=${cookie.value}`))return reject("[Cookies Manager] : The name of the cookie and its value must contain only characters, numbers, dashes (-) or underscore(_). The value can also contain spaces.");if(cookie.secure&&"http:"===location.protocol)return reject("[Cookies Manager] : You cannot set your cookie as secure because you are not in HTTPS");if(cookie.key.startsWith("__Secure-")&&"http:"===location.protocol)return reject("[Cookies Manager] : To use the __Secure- prefix you must be in HTTPS.");if(cookie.key.startsWith("__Secure-")&&!cookie.secure)return reject("[Cookies Manager] : To use the __Secure- prefix you define secure to true in the object");if(cookie.key.startsWith("__Host-")&&!cookie.secure)return reject("[Cookies Manager] : To use the __Host- prefix you define secure to true in the object");if(cookie.key.startsWith("__Host-")&&cookie.domain)return reject("[Cookies Manager] : To use the __Host- prefix you must not define a domain.");if(cookie.key.startsWith("__Host-")&&"/"!==cookie.path)return reject('[Cookies Manager] : To use the __Host- prefix you must have a path equal to "/".');if("None"===cookie.sameSite&&!cookie.secure)return reject("[Cookies Manager] : To define SameSite=None you must define secure to true in the object.");if(cookie.expire&&cookie.expire<=0)return reject("[Cookies Manager] : You cannot set a negative expiration date.");const COOKIE=_reBuild(cookie);return document.cookie=`${COOKIE.key}=${COOKIE.value}; Max-Age=${COOKIE.expire} ${COOKIE.domain} Path=${COOKIE.path}; ${COOKIE.secure} ${COOKIE.httpOnly} ${COOKIE.sameSite}`,resolve({success:!0,message:"Your cookie has been created with the following settings:",Cookie:COOKIE})}),getList=async()=>{const COOKIES=_getDocumentCookies();return""===COOKIES[0]?[]:COOKIES.map(cookie=>{const Matcher=cookie.match(REGEX);return Matcher[1]})},remove=async key=>new Promise((resolve,reject)=>get(key).then(cookie=>(document.cookie=`${cookie.key}=; Max-Age=-1; Domain=; Path=;`,resolve({success:!0,message:`Your cookie ${cookie.key} has been deleted.`}))).catch(err=>reject(err))),clear=async()=>{const COOKIES=await getList();0!==COOKIES.length&&COOKIES.forEach(cookie=>remove(cookie))},_getDocumentCookies=()=>document.cookie.split(";"),_reBuild=cookie=>({key:cookie.key,value:cookie.value,expire:cookie.expire?`${86400*cookie.expire};`:"Session;",domain:cookie.domain?`${cookie.domain};`:"",path:cookie.path?`${cookie.path}`:"/",secure:cookie.secure?"Secure;":"",httpOnly:cookie.httpOnly?"HttpOnly;":"",sameSite:"Strict"===cookie.sameSite||"Lax"===cookie.sameSite?`${cookie.sameSite};`:"Strict;"}),_exist=async key=>{const COOKIES=_getDocumentCookies();return 0!==COOKIES.length&&COOKIES.some(cookie=>{const Matcher=cookie.match(REGEX);return Matcher[1]===key})};return{get:get,set:set,getList:getList,remove:remove,clear:clear,version:"0.0.5"}},CookiesManager=_CookiesManager();